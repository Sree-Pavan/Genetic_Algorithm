# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14-4tq9mYugPGgnH7qYigwOGms20RCZRh
"""

import math
from numpy.random import randint
from numpy.random import rand
import numpy as np
import matplotlib.pyplot as plt
import random

def mutation(gene_list):
    f = [encode(i) for i in gene_list]
    l = len(f)
    for i in range(l):
        r = True
        y = random.randrange(0,9,1)
        j = random.randrange(0,9,1)
        t = random.randrange(1,4,1)
        h = random.randrange(1,4,1)
        if r:
            f[i][0] = r
            f[i][t] = y
            f[i][h] = j
    decoded = [decode(i) for i in f]
    return decoded
def crossover(gene):
    c1 = gene.copy()
    c2 = gene.copy()
    c = c1+ c2
    return c
def selection(gene_list):
    if len(gene_list) == 1:
        return gene_list
    else:
        l = len(gene_list)
        aver = []
        total = 0
        selected = []
        scores = [np.round(fitness(i),4) for i in gene_list]
        for i in scores:
            total += i
        for i in range(l):
            aver.append(gene_list[i]//total)
        for i in range(len(aver)):
            if abs(aver[i])>=1:
                selected.append(gene_list[i])
    return selected

def fitness(x):
    return float((x*math.sin(10*math.pi*x))+1)

def encode(o):
    encoded = []
   
    val = False
    if o<0:
        val = True
    if val==True:
        encoded.append(-1)
        h = abs(float(o))
        v = format(h,'.4f')
        x = [d for d in str(v)]
        for i in range(2,6):
            encoded.append(int(x[i]))
    else:
        encoded.append(1)
        h = abs(float(o))
        v = format(h,'.4f')
        x = [d for d in str(v)]
        for i in range(2,6):
            encoded.append(int(x[i]))
    return encoded
def decode(x):
    if len(x)<5:
        for i in range(0,5-len(x)):
            x.append(0)
    elif len(x)>5:
        for i in range(0,len(x)-5):
            x.remove(i+5)
    
    if x[0] == -1:
        return float((-1*((1000*x[1])+(100*x[2])+(10*x[3])+x[4]))/10000)
    elif x[0] == 1:
        return float(((1000*x[1])+(100*x[2])+(10*x[3])+x[4])/10000)
    elif x[0] == 0:
        return 0
def genetic_algorithm(genes,iterations=20):
    l = len(genes)
    s=0
    selected = selection(genes)
    total_copied = [] 
    for i in range(l):
        copied = crossover(selected)
        total_copied += copied
    mutated = mutation(total_copied)
    mut_1 = pop_check(mutated)
    return mut_1
def pop_check(pop):
    l = len(pop)
    for i in range(0,len(pop)):
        if pop[i] == None:
            pop.remove(pop[i])
    for i in range(0,len(pop)):
        if pop[i]<=-0.5 or pop[i]>=1:
            pop.remove(pop[i])
    return pop

iterations = 10
max_scores = []
r = []
lis = []
x = []
final_list = []
for i in range(5):
    r.append(round(random.uniform(-0.5,1),4))

# for i in range(iterations):
    
#     final_list[i] = genetic_algorithm(r)
#     print(len(final_list[i]))
#     for j in range(len(final_list[i])):
#         lis.append(fitness(final_list[i][j]))
#     max_scores.append(max(lis))
#     r = final_list[i]
#     print(x)
for i in range(iterations):
    final_list = genetic_algorithm(r)
    for j in range(len(final_list)):
      x.append(fitness(final_list[j]))
    max_scores.append(max(x))
    r += final_list
    
print(max_scores)
all_iter= []
for i in range(iterations):
    all_iter.append(i)
fig, axs= plt.subplots()
axs.plot(all_iter,max_scores)
axs.set_title("Best only mutation")